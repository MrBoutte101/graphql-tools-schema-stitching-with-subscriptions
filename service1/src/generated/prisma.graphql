# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Actor implements Node {
  id: ID!
  actorId: String!
  firstName: String!
  lastName: String!
  gender: Gender!
}


#
# Other Types
#

"""
A connection to a list of items.
"""
type ActorConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ActorEdge]!
  aggregate: AggregateActor!
}

input ActorCreateInput {
  actorId: String!
  firstName: String!
  lastName: String!
  gender: Gender!
}

"""
An edge in a connection.
"""
type ActorEdge {
  """
  The item at the end of the edge.
  """
  node: Actor!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ActorOrderByInput {
  id_ASC
  id_DESC
  actorId_ASC
  actorId_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  gender_ASC
  gender_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActorPreviousValues {
  id: ID!
  actorId: String!
  firstName: String!
  lastName: String!
  gender: Gender!
}

type ActorSubscriptionPayload {
  mutation: MutationType!
  node: Actor
  updatedFields: [String!]
  previousValues: ActorPreviousValues
}

input ActorSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ActorSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ActorSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActorWhereInput
}

input ActorUpdateInput {
  actorId: String
  firstName: String
  lastName: String
  gender: Gender
}

input ActorWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ActorWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ActorWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  actorId: String
  """
  All values that are not equal to given value.
  """
  actorId_not: String
  """
  All values that are contained in given list.
  """
  actorId_in: [String!]
  """
  All values that are not contained in given list.
  """
  actorId_not_in: [String!]
  """
  All values less than the given value.
  """
  actorId_lt: String
  """
  All values less than or equal the given value.
  """
  actorId_lte: String
  """
  All values greater than the given value.
  """
  actorId_gt: String
  """
  All values greater than or equal the given value.
  """
  actorId_gte: String
  """
  All values containing the given string.
  """
  actorId_contains: String
  """
  All values not containing the given string.
  """
  actorId_not_contains: String
  """
  All values starting with the given string.
  """
  actorId_starts_with: String
  """
  All values not starting with the given string.
  """
  actorId_not_starts_with: String
  """
  All values ending with the given string.
  """
  actorId_ends_with: String
  """
  All values not ending with the given string.
  """
  actorId_not_ends_with: String
  firstName: String
  """
  All values that are not equal to given value.
  """
  firstName_not: String
  """
  All values that are contained in given list.
  """
  firstName_in: [String!]
  """
  All values that are not contained in given list.
  """
  firstName_not_in: [String!]
  """
  All values less than the given value.
  """
  firstName_lt: String
  """
  All values less than or equal the given value.
  """
  firstName_lte: String
  """
  All values greater than the given value.
  """
  firstName_gt: String
  """
  All values greater than or equal the given value.
  """
  firstName_gte: String
  """
  All values containing the given string.
  """
  firstName_contains: String
  """
  All values not containing the given string.
  """
  firstName_not_contains: String
  """
  All values starting with the given string.
  """
  firstName_starts_with: String
  """
  All values not starting with the given string.
  """
  firstName_not_starts_with: String
  """
  All values ending with the given string.
  """
  firstName_ends_with: String
  """
  All values not ending with the given string.
  """
  firstName_not_ends_with: String
  lastName: String
  """
  All values that are not equal to given value.
  """
  lastName_not: String
  """
  All values that are contained in given list.
  """
  lastName_in: [String!]
  """
  All values that are not contained in given list.
  """
  lastName_not_in: [String!]
  """
  All values less than the given value.
  """
  lastName_lt: String
  """
  All values less than or equal the given value.
  """
  lastName_lte: String
  """
  All values greater than the given value.
  """
  lastName_gt: String
  """
  All values greater than or equal the given value.
  """
  lastName_gte: String
  """
  All values containing the given string.
  """
  lastName_contains: String
  """
  All values not containing the given string.
  """
  lastName_not_contains: String
  """
  All values starting with the given string.
  """
  lastName_starts_with: String
  """
  All values not starting with the given string.
  """
  lastName_not_starts_with: String
  """
  All values ending with the given string.
  """
  lastName_ends_with: String
  """
  All values not ending with the given string.
  """
  lastName_not_ends_with: String
  gender: Gender
  """
  All values that are not equal to given value.
  """
  gender_not: Gender
  """
  All values that are contained in given list.
  """
  gender_in: [Gender!]
  """
  All values that are not contained in given list.
  """
  gender_not_in: [Gender!]
}

input ActorWhereUniqueInput {
  id: ID
  actorId: String
}

type AggregateActor {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createActor(data: ActorCreateInput!): Actor!
  updateActor(data: ActorUpdateInput!, where: ActorWhereUniqueInput!): Actor
  deleteActor(where: ActorWhereUniqueInput!): Actor
  upsertActor(where: ActorWhereUniqueInput!, create: ActorCreateInput!, update: ActorUpdateInput!): Actor!
  updateManyActors(data: ActorUpdateInput!, where: ActorWhereInput!): BatchPayload!
  deleteManyActors(where: ActorWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  actors(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Actor]!
  actor(where: ActorWhereUniqueInput!): Actor
  actorsConnection(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActorConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  actor(where: ActorSubscriptionWhereInput): ActorSubscriptionPayload
}
