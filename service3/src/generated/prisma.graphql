# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Genre implements Node {
  id: ID!
  genreId: String!
  name: String!
  movieIds: [String!]
}


#
# Other Types
#

type AggregateGenre {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type GenreConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GenreEdge]!
  aggregate: AggregateGenre!
}

input GenreCreateInput {
  genreId: String!
  name: String!
  movieIds: GenreCreatemovieIdsInput
}

input GenreCreatemovieIdsInput {
  set: [String!]
}

"""
An edge in a connection.
"""
type GenreEdge {
  """
  The item at the end of the edge.
  """
  node: Genre!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum GenreOrderByInput {
  id_ASC
  id_DESC
  genreId_ASC
  genreId_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GenrePreviousValues {
  id: ID!
  genreId: String!
  name: String!
  movieIds: [String!]
}

type GenreSubscriptionPayload {
  mutation: MutationType!
  node: Genre
  updatedFields: [String!]
  previousValues: GenrePreviousValues
}

input GenreSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GenreSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GenreSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GenreWhereInput
}

input GenreUpdateInput {
  genreId: String
  name: String
  movieIds: GenreUpdatemovieIdsInput
}

input GenreUpdatemovieIdsInput {
  set: [String!]
}

input GenreWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GenreWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GenreWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  genreId: String
  """
  All values that are not equal to given value.
  """
  genreId_not: String
  """
  All values that are contained in given list.
  """
  genreId_in: [String!]
  """
  All values that are not contained in given list.
  """
  genreId_not_in: [String!]
  """
  All values less than the given value.
  """
  genreId_lt: String
  """
  All values less than or equal the given value.
  """
  genreId_lte: String
  """
  All values greater than the given value.
  """
  genreId_gt: String
  """
  All values greater than or equal the given value.
  """
  genreId_gte: String
  """
  All values containing the given string.
  """
  genreId_contains: String
  """
  All values not containing the given string.
  """
  genreId_not_contains: String
  """
  All values starting with the given string.
  """
  genreId_starts_with: String
  """
  All values not starting with the given string.
  """
  genreId_not_starts_with: String
  """
  All values ending with the given string.
  """
  genreId_ends_with: String
  """
  All values not ending with the given string.
  """
  genreId_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input GenreWhereUniqueInput {
  id: ID
  genreId: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createGenre(data: GenreCreateInput!): Genre!
  updateGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
  deleteGenre(where: GenreWhereUniqueInput!): Genre
  upsertGenre(where: GenreWhereUniqueInput!, create: GenreCreateInput!, update: GenreUpdateInput!): Genre!
  updateManyGenres(data: GenreUpdateInput!, where: GenreWhereInput!): BatchPayload!
  deleteManyGenres(where: GenreWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  genres(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Genre]!
  genre(where: GenreWhereUniqueInput!): Genre
  genresConnection(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GenreConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  genre(where: GenreSubscriptionWhereInput): GenreSubscriptionPayload
}
